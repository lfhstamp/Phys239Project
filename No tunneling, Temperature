import numpy as np
import scipy.integrate
import matplotlib.pyplot as plt
%matplotlib inline

class Project(object):

    """
    This class is used to calculate the positions of protons over time.
    """

    def __init__(self, fuz, p, dt1, tmax, size, dev, T, scale):
        """
        Create a day of the year

        Parameters:

        fuz = the distance at which protons will fuz
        p = number of protons
        dt1 = time step
        v0 = inital velociy's
        r0 = initial positions
        m1 = initial mass's
        tmax = final time
        size = the size squared of the box
        dev = the deviation in the protons initial speed
        T = the starting temperature of the box
        scale = the scale based on when protons fuze 
        """
        #here we have the starting position of all the particles set diagonally acroos the box
        r0 = np.zeros(2*p)
        for i in range(0,(2*p)-1,2):
            for j in range(0,2,1):

                r0[j+i] = -size/2 + (size/p)/4 + (i/2)*size/p

        #Initial velocities are set based on desired initial temperature. 
        #Each component of the initial velocity is distributed normally.
        #The mean is 0, and the standard deviation is (kT/m)^0.5 . This gives a Maxwell-Boltzmann distribution.
        v0 = np.zeros(2*p)
        for i in range(0,(2*p),1): 

            v0[i] = np.sqrt((T*1.381*10**-23)/(1.67*10**-27))*np.random.randn()

        self.scale1 = scale    
        self.scale = (10**-15)*self.scale1
        self.p = p
        self.dt1 = dt1
        self.vv = vv
        self.v0 = v0
        self.r0 = r0
        self.mp = 1.67*10**-27
        self.tmax = tmax
        self.fuz = fuz
        self.size = size
        self.k = 0  #a counter for 1st of fussion reation
        self.k1 = 0 #a counter for 2st of fussion reation
        self.k2= 0 #a counter for 3st of fussion reation
        self.kb = 1.381*10**-23             #boltzmann constant
        self.T = T                          #Temperature in Kelvin
        self.h = 6.63e-34  #planks constant
                   




    def RK4(self):
        """
        creates position of particles over time

        Args:
            __int__ Parameters

        Returns:
            New positions per time
        """
        # same as previous
        dt = self.dt1 #time step
        t0=0. 
        #dt = np.zeros(self.p*(self.p-1))
        r = np.array(self.r0) #all positions
        v = np.array(self.v0) #all velocity
        s = np.empty(len(r)) 
        sdt = np.empty(len(r))
        q = np.array([r,v,s,sdt]) #all the positions
        Q = np.zeros(len(r))
        self.Q = np.zeros(len(r)) #values for each particle determining its charge if Q[i] = 1, ith particle has a neutron in its compound
        save = np.array([r]) #list of final postions
        tpoints = np.arange(t0,self.tmax,dt) #list of step pattern of time
        time =[0.]
        Save=[]


        def tempcalc(q):
            """
            Calculates the themperature of the system
            
            Args:
            
            -q, an array of all postions and accelerations
            
            Returns:
            
            Temperature of the system
            
            """
            totalKE=0.
            for i in np.arange(0,2*self.p-1,2):
                v2= q[1,i]**2 + q[1,i+1]**2
                p2over2m= 0.5*self.mp*v2
                totalKE += p2over2m
            return (totalKE/self.p)/self.kb

        def AvKE(q):
            """
            calculates average kinetic energy

            Args:
                q

            Returns:
                average kinetic energy per particle
            """
            totalKE=0.
            for i in np.arange(0,2*self.p-1,2):
                v2= q[1,i]**2 + q[1,i+1]**2
                p2over2m= 0.5*self.mp*v2
                totalKE += p2over2m
            return (totalKE/self.p)

        def TunnelingProb(q):
            """
           determins probability of quantum tunneling

            Args:
                q

            Returns:
                probability of quantum tunneling
            """
            Prob = np.exp(-((490*1.6e-16*(self.scale/self.fuz ))/AvKE(q))**0.5)
            return (Prob)

        def dbwave(q):
            """
            determines Debroglie wavelenght, The distance quatum tunneling can occur at

            Args:
                q

            Returns:
                Debrogle wavelenght
            """
            db = self.h*(2*self.mp*AvKE(q))**-0.5
            return(db)



        def af(r, s, Q):
            """
            determins the accelration of the particle

            Args:
                q

            Returns:
                acceleration of the particle
            """
            Q1 = 1.6*10**-19
            Q2 = 1.6*10**-19
            k = 9*(10**9)
            a = np.zeros(self.p*2)
            #r = q[0,:]


            for i in range(0,(2*self.p)-1,2):

                for j in range(0,(2*self.p)-1,2): 

                    if i!=j:
                        y= r[j+1] - r[i+1]
                        x=r[j] - r[i]
                        d = (x*x + y*y)**0.5

                        if d < (self.fuz-(self.fuz/2)):
                            a[i] += 0
                            a[i+1] += 0
                            """
                            determins if particles have been fuzed by checking if they have almost the smae position
                            if so than sets there acceleration relative to each other to zero
                            """
                        else:
                            if Q[i] == 1:

                                a[i] +=-((k/self.mp)*Q1*Q2*x/d/d/d)/2 #-(s*q[1,i])
                                a[i+1] +=-((k/self.mp)*Q1*Q2*y/d/d/d)/2 #-(s*q[1,i+1])
                            if Q[i] == 2:

                                a[i] +=-((k/self.mp)*Q1*Q2*x/d/d/d)*(2/3) #-(s*q[1,i])
                                a[i+1] +=-((k/self.mp)*Q1*Q2*y/d/d/d)*(2/3) #-(s*q[1,i+1])
                            else:
                                a[i] +=-((k/self.mp)*Q1*Q2*x/d/d/d) #-(s*q[1,i])
                                a[i+1] +=-((k/self.mp)*Q1*Q2*y/d/d/d) #-(s*q[1,i+1])
                            """
                            dertermins the acceleration of the particle debending on which part of the fuzzing process they have gone through
                            if step 1: than 1 of the 2 particles in the fussion turns into a neutron. therefore it has charge and zero aceleration
                            therefore the total acceleration is halved
                            if step 2: than 1 of 3 particles in fussion turns into a neutron. therefore it has charge and zero aceleration
                            therefore the total acceleration is multipied by 2/3
                            if step 3: same step 1 because it has 2 protons and 2 neutrons
                            if no fussion simple acceleration based on coloumbs law
                            """


            return (np.array(a))




        def f(q, t, Q):
            """
            creates an array of velocity and acceleration

            Args:
               position (r) and velocity(v)

            Returns:
                velocity (v) and acceleration (a)
            """


            return (np.array([q[1,:], af(q[0,:], q[2,0], Q), q[3,:], np.zeros(len(r))]))

        def box(q):
            """
            determins if the particle is outside the box 
            if so puts position at edge of box and flips velocity

            Args:
               q

            Returns:
                q
            """

            for i in range(0,2*self.p,1):

                if q[0,i] <= -self.size/2 : 
                    q[1,i] =-q[1,i]
                    q[0,i] =-self.size/2

                if q[0,i] >= self.size/2 : 
                    q[1,i] =-q[1,i]
                    q[0,i] = self.size/2

            return (q)



        def distance_check(q):
            """
            checks if the distance is close enough to fuze
            if so records particls that fuzed and place in array

            Args:
               q

            Returns:
                fuzed
            """
            fuzed = np.array([[0,0]])

            r = q[0]
            for i in range(0,(2*self.p)-1,2):

                for j in range(i,(2*self.p)-1,2): 

                    if i!=j:
                        y= r[j+1] - r[i+1]
                        x=r[j] - r[i]
                        d = (x*x + y*y)**0.5 #calculates distance

                        if d < self.fuz and d > (self.fuz-(self.fuz/2)): 
                            fuzed = np.concatenate((fuzed, np.array([[i,j]])),axis=0)
                            """
                            if particle is close enough to fuze but has not already fuzed 
                            collect its position in array q in an array fuzed
                            """


            return (fuzed)

        def fussion_step2 (q, fuze, QQ):
            """
            takes 2 fuzed particles and gives them the same velocity equal to the sum of ther intividual velocitys
            gives them the same position equal to half the distance between there individual positions

            Args:
               q, fuze,
               QQ = the new charge for each particle depending on which step of the fussion they have gone through


            Returns:
                q, 
                Q = an array that determins what the charge should be for each particle
            """
            g=[0,0]
            i = np.empty(len(fuze[:,0]))
            j = np.empty(len(fuze[:,0]))
            i1 = np.zeros((len(fuze[:,0]),2))
            j1 = np.zeros((len(fuze[:,0]),2))
            i2 = np.zeros((len(fuze[:,0]),2))
            j2 = np.zeros((len(fuze[:,0]),2))
            #g.append(['yes'])
            g = 'yes'

            for k in range(1,len(fuze[:,0]-1),1):

                i = fuze[k,0]
                j = fuze[k,1]

                i1[k] = [q[0,i],q[1,i]]
                i2[k] = [q[0,i+1],q[1,i+1]]
                j1[k] = [q[0,j],q[1,j]]
                j2[k] = [q[0,j+1],q[1,j+1]]
                Q[i] = QQ
                Q[j] = QQ

            for k in range(1,len(fuze[:,0]-1),1):

                i = fuze[k,0]
                j = fuze[k,1]
                newxV = i1[k,1]+j1[k,1]  #((self.mp*q[1,i]) + (self.mp*q[1,j]))/(2*self.mp)
                newyV = i2[k,1]+j2[k,1]  #((self.mp*q[1,i+1]) + (self.mp*q[1,j+1]))/(2*self.mp)

                q[1,i] = newxV
                q[1,i+1] = newyV
                q[1,j] = newxV
                q[1,j+1] = newyV
                q[0,i] = (j1[k,0]+i1[k,0])/2
                q[0,i+1] = (j2[k,0]+i2[k,0])/2
                q[0,j] = (j1[k,0]+i1[k,0])/2
                q[0,j+1] = (j2[k,0]+i2[k,0])/2
                #np.delete(q, [j,j+1], axis=1)

            return (q,Q)

        def fussion (q,Q):
            """
            takes 2 fuzed particles and disides which part of the fussion porocces there going through
            depending on which aspect of k/k1/k2 is get 1 added to it

            Args:
               q, Q

            Returns:
                q, Q
            """

            fuze = distance_check(q)
            h = np.size(fuze)

            if np.size(fuze) == 4 : #fussion step 1
                q,Q = fussion_step2(q,fuze,1)
                self.k += 1

            if np.size(fuze) == 6:
                if np.any(fuze[1]) == np.any(fuze[2]): #fussion step 2
                    q,Q = fussion_step2(q,fuze,2)
                    self.k1 += 1
                else: 
                    q,Q = fussion_step2(q,fuze,1) #fussion step 1
                    self.k += 2

            if np.size(fuze) == 11:
                q,Q = fussion_step2(q,fuze,1) #fussion step 3
                q[0,i] += 2*self.fuz #takes 2 out of the six particles and puts them alone back out into the system
                q[0,j] += 2*self.fuz
                Q[i] = 0 
                Q[j] = 0
                self.k3 += 1

            if np.size(fuze) > 6:
                z=0
                for k in range(1,len(fuze[:,0])-2,1): #fussion step 1
                    if np.any(fuze[k,:]) != np.any(fuze[k+1,:]): #checks if there are multiple step 1's happening at once
                        z+=1
                if z == len(fuze[:,0])-2:
                    q,Q = fussion_step2(q,fuze,1)
                    self.k += z+1
            else:
                q=q
                g = 'no'

            return(np.array(q),[fuze,q[0]],Q)
        k=0
        dd = []
        pp=[]

        for t in tpoints:
            k+=1
            tau = dt/0.0025
            q = box(q)
            #q[3,0]=dsdt(q)
            #rs=dsdt(q)
            temp=tempcalc(q)
            save = np.concatenate((save, [q[0]]),axis=0)
            time.append(t)

            k1 = dt*f(q, t, Q)  #Splits the time step into 4 and looks at the derivative at each point
            k2 = dt*f(q + 0.5*k1, t+0.5*dt, Q)
            k3 = dt*f(q + 0.5*k2, t+0.5*dt, Q)
            k4 = dt*f(q + k3, t+dt, Q)
            q += (k1+2*k2+2*k3+k4)/6.0

            Tx = tempcalc(q)                                     #Calculates current temperature of the system
            sf = np.sqrt(1. + (dt/tau)*((self.T/Tx)-1.))         #Calculates the scaling factor for the Berendsen Thermostat
            for i in np.arange(0, 2*self.p, 1):                  #Muliplies all velocities by the scaling factore
                q[1,i] = q[1,i]*sf
            #print(Tx)

            q,d,Q = fussion(q,Q)
            pp.append(d)
            dd.append([self.vv,TunnelingProb(q),AvKE(q),(self.fuz/(self.scale*self.scale1))*dbwave(q)])
            K = [self.k,self.k1,self.k2]

            """
            this is where are timesteps are being looped through and the derivits from the RK4 method are being used
            the q values get set depending if certain conditions are met in each of the funtions staed above
            """







        return (np.array(time),save,dd,K)
fuz =0.5 #critical lenght that causes fussion
pp = 20   # number of particles
dt1 = .1 # time step
tmax = 100  #max time
size = 100  #dimentions of box
dev = 0.5  #deviation in the intial velocity
T=1000. #starting temp
scale = 10**3 #scale change form known values
            # 1 for ideal model
            # 10**3 for adapted model


(t,save,p,d) = Project(fuz, pp, dt1, tmax, size, dev,T,scale).RK4();

print("there have been", d, "fussions")


for i in range(0,(2*pp)-1,2):
    plt.plot(save[:,i],save[:,i+1], '.')
print(p[0])

plt.tight_layout()
